generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                       String         @id @default(cuid())
  name                     String
  email                    String         @unique
  password                 String
  isAdmin                  Boolean        @default(false)
  suspended                Boolean        @default(false)
  createdAt                DateTime       @default(now())
  updatedAt                DateTime       @updatedAt
  role                     String         @default("BUYER")
  avatarUrl                String?
  conversations            Conversation[] @relation("UserConversations")
  conversationParticipants Conversation[] @relation("Participants")
  messages                 Message[]
  notifications            Notification[]
  ordersAsBuyer            Order[]        @relation("BuyerOrders")
  ordersAsSeller           Order[]        @relation("SellerOrders")
  products                 Product[]
  sellerProfile            SellerProfile?
  wishlist                 WishlistItem[]
  requestsAsBuyer          Request[]      @relation("BuyerRequests")
  requestsAsSeller         Request[]      @relation("SellerRequests")
  cartItems                CartItem[]
  paystackRecipientCode    String?
}

model SellerProfile {
  id                  String   @id @default(cuid())
  userId              String   @unique
  storeName           String
  contact             String
  address             String
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  bankAccountName     String?
  bankAccountNumber   String?
  bankName            String?
  bankCode            String?
  accountNumber       String?
  mtnMomoNumber       String?
  otherPaymentDetails String?
  telecelCashNumber   String?
  user                User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Product {
  id            String         @id @default(cuid())
  title         String
  price         Float
  description   String
  category      String
  condition     String
  sellerId      String
  createdAt     DateTime       @default(now())
  status        String         @default("active")
  reports       Int            @default(0)
  requests      Int            @default(0)
  updatedAt     DateTime       @updatedAt
  views         Int            @default(0)
  orders        Order[]
  seller        User           @relation(fields: [sellerId], references: [id], onDelete: Cascade)
  images        ProductImage[]
  wishlistItems WishlistItem[]
  productRequests Request[]
  cartItems     CartItem[]
}

model ProductImage {
  id        String   @id @default(cuid())
  url       String
  productId String
  createdAt DateTime @default(now())
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model Order {
  id               String      @id @default(cuid())
  status           String      @default("pending")
  createdAt        DateTime    @default(now())
  shippingAddress  String
  updatedAt        DateTime    @updatedAt
  amount           Float
  buyerId          String
  notes            String?
  paymentReference String
  productId        String
  sellerId         String
  paymentStatus    String      @default("pending") // pending, paid, released, refunded
  deliveredAt      DateTime?
  autoReleaseDate  DateTime?
  commissionRate   Float       @default(0.05) // 5% commission
  commissionAmount Float?
  sellerAmount     Float?
  refundReason     String?
  refundedAt       DateTime?
  transferReference String?
  transferredAt    DateTime?
  paymentMethod    String?
  buyer            User        @relation("BuyerOrders", fields: [buyerId], references: [id])
  product          Product     @relation(fields: [productId], references: [id])
  seller           User        @relation("SellerOrders", fields: [sellerId], references: [id])
  commission       Commission?
  refund           Refund?
}

model Notification {
  id        String   @id @default(cuid())
  userId    String
  type      String
  title     String
  message   String
  data      String?
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Conversation {
  id        String    @id @default(cuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  buyerId   String
  productId String?
  sellerId  String
  buyer     User      @relation("UserConversations", fields: [buyerId], references: [id])
  seller    User      @relation("Participants", fields: [sellerId], references: [id])
  messages  Message[]
}

model Message {
  id             String       @id @default(cuid())
  conversationId String
  senderId       String
  content        String
  createdAt      DateTime     @default(now())
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  sender         User         @relation(fields: [senderId], references: [id])
}

model WishlistItem {
  id        String   @id @default(cuid())
  userId    String
  productId String
  createdAt DateTime @default(now())
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, productId])
}

model Request {
  id        String   @id @default(cuid())
  productId String
  buyerId   String
  sellerId  String
  message   String?
  status    String   @default("pending") // pending, accepted, rejected, cancelled
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  buyer     User     @relation("BuyerRequests", fields: [buyerId], references: [id], onDelete: Cascade)
  seller    User     @relation("SellerRequests", fields: [sellerId], references: [id], onDelete: Cascade)

  @@unique([productId, buyerId])
}

model CartItem {
  id        String   @id @default(cuid())
  userId    String
  productId String
  quantity  Int      @default(1)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([userId, productId])
}

model Commission {
  id        String   @id @default(cuid())
  orderId   String   @unique
  amount    Float
  rate      Float    @default(0.05)
  status    String   @default("pending") // pending, collected
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  order     Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
}

model Refund {
  id          String    @id @default(cuid())
  orderId     String    @unique
  amount      Float
  reason      String
  status      String    @default("pending") // pending, approved, rejected, processed
  requestedBy String    // buyerId who requested refund
  approvedBy  String?   // adminId who approved
  createdAt   DateTime  @default(now())
  processedAt DateTime?
  order       Order     @relation(fields: [orderId], references: [id], onDelete: Cascade)
}
